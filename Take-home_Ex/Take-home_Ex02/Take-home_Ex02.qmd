---
title: "Take-home Exercise 2"
subtitle: "Visual Analytics to Identify Companies That May Be Engaged in Illegal Fishing"
author: "Alicia"
date: "18 May 2023"
date-modified: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
editor: visual

execute:
  echo: true
  eval: true
  warning: false
---

# **1. Overview**

This exercise aims to use appropriate static and interactive statistical graphics methods to help FishEye identify companies that may be engaged in illegal fishing.

The original dataset was originated from Mini Challenge 2 of Vast Challenge 2023.

There is one folder and one file downloaded: *bundles* and *mc_challenge_graph.json*. The *bundles* folder contains 12 groups of link suggestions.

This exercise aims to answer Q1 of the challenge:

-   Use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images.

As such, only the *mc_challenge_graph.json* file is used in this exercise.

# **2. Data Preparation**

## 2.1 Install R packages and import dataset

The code chunk below uses `pacman::p_load()` to check if packages are installed. If they are, they will be launched into R.

```{r}
#Load packages
pacman::p_load(jsonlite, igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, extrafont, knitr)
```

Import datasets using `fromJSON`.

```{r}
#Import data
MC2 <- fromJSON("data/mc2_challenge_graph.json")
```

## 2.2 Data Wrangling

### 2.2.1 Extracting the nodes and edges

Extract the nodes:

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>%
  select(id, shpcountry, rcvcountry)
kable(head(MC2_nodes))
```

Extract the edges:

-   Convert arrivaldate from `chr` to `Date` format.
-   Extract year from arrivaldate.
-   Remove duplicate records, if any.

```{r}
MC2_edges <- as_tibble(MC2$links) %>%
  mutate(ArrivalDate = ymd(arrivaldate)) %>%
  mutate(Year = year(ArrivalDate)) %>%
  select(source, target, ArrivalDate, Year, hscode,  valueofgoods_omu, 
         volumeteu, weightkg, valueofgoodsusd) %>% 
  distinct()
kable(head(MC2_edges))
```

::: callout-note
Looking at the data below, we notice a few problems as follows:

MC2_nodes: - Missing fields in `shpcountry` and `rcvcountry`. - Weird `id`, `shpcountry` and `rcvcountry` values e.g. -1143, -6894, etc.

MC2_edges: - Missing fields in `valueofgoods_omu`, `volumeteu` and `valueofgoodsusd`. - `source` and `target`have weird values e.g. -1992.

The weird id values still represent the respective companies. As such they are still valid and should be not removed. As for the missing values, we will leave them aside as we will not use these variables.
:::

### 2.2.2 Preparing edges data table

Reference to Singapore Trade Classification, Customs and Excise Duties 2022 HS code, we filter only those codes that are relevant to fishes, as follows:

-   Chapter 3: Fish and crustaceans, molluscs and other aquatic invertebrates - 0301, 0302, 0303, 0304, 0305, 0306, 0307, 0308, 0309

-   Chapter 15: Animal, vegetable or microbial fats and oils and their cleavage products - 1504

-   Chapter 16: Preparations of meat, of fish, crustaceans, molluscs or other aquatic 73 invertebrates, or of insects - 1603, 1604, 1605

-   Chapter 21: Flours, meals and pellets, of meat or meat offal, of fish or of crustaceans, molluscs or other aquatic invertebrates, unfit for human consumption; greaves - 2301

We also took reference from Connect2india and identified that codes ranging from 300000 - 390000 are related to fishes too. Codes in this range are filtered out and included in the analysis.

-   hscode is converted from `chr` to `int` format.

-   Duplicate records are removed, if any.

```{r}
MC2_edges$hscode <- as.integer(MC2_edges$hscode)

MC2_edges1 <- MC2_edges %>% filter(between(hscode, 030100, 030999))
MC2_edges2 <- MC2_edges %>% filter(between(hscode, 150400, 150499))
MC2_edges3 <- MC2_edges %>% filter(between(hscode, 160300, 160599))
MC2_edges4 <- MC2_edges %>% filter(between(hscode, 230100, 230199))
MC2_edges5 <- MC2_edges %>% filter(between(hscode, 300000, 390000))

MC2_edges <- rbind(MC2_edges1, MC2_edges2, MC2_edges3, MC2_edges4, MC2_edges5) %>%
  distinct()
```

-   Compute weights i.e. no. of times a specific source is linked to a specific target.

```{r}
MC2_edges_aggregated <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target) %>%
  ungroup() 
```

-   Form a new nodes data table for MC2 by using source and target of MC2_edges_aggregated data table. This is to ensure that the nodes in nodes data tables include all the source and target values.

```{r}
id1 <- MC2_edges_aggregated %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```

There is a total of 15152 companies involved in fishing activities from 2028 to 2034.

# **3. Visualising the network graph**

## 3.1 Overview: Top 80 Weights Companies

### 3.1.1 Data Preparation

-   Filter MC2_edges_aggregated data table by top 80 weights records.

```{r}
MC2_edges_aggregated_top80 <- MC2_edges_aggregated %>% 
  arrange(desc(weights)) %>%
  head(80)
kable(head(MC2_edges_aggregated_top80))
```

-   Preparing nodes data table:

```{r}
id1 <- MC2_edges_aggregated_top80 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_top80 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_top80 <- rbind(id1, id2) %>%
  distinct()
```

### 3.1.2 Static Network Graph

```{r}
MC2_graphtop80 <- tbl_graph(nodes = MC2_nodes_extracted_top80,
                       edges = MC2_edges_aggregated_top80,
                       directed = TRUE) 

ggraph(MC2_graphtop80, 
            layout = "linear", circular = TRUE) +
  geom_edge_link(aes(width = weights, colour = factor(Year)), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(), 
                  size = 3) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Top 80 Weights Companies") 
```

::: callout-Insights
The edge width denotes the weights size. The higher the weights, the thicker the edge width. The edge colour denotes the year.

From MC2 data, the top 3 highest-weight source-\>target are identified as follows:

| No. | Source                           | Target                                              | Year / (weights)       |
|------------------|------------------|-------------------|------------------|
| 1   | nián yú Ltd. Corporation         | Niger Bend Limited Liability Company Marine ecology | 2031: 3471, 2030: 2979 |
| 2   | nián yú Ltd. Corporation         | Costa de la Felicidad Shipping                      | 2029: 2797, 2028: 2473 |
| 3   | Sea Breezes S.A. de C.V. Freight | Caracola del Sol Services                           | 2031: 2708             |
:::

## 3.2 Distribution of hscode with top weights by Year

We observed that the top 19 weights companies are associated with hscode 304620. We want to find out the distribution of this code by year.

```{r}
ggplot(data=MC2_edges_aggregated %>% filter(hscode == "304620"), 
       aes(y = weights, x= factor(Year))) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun.y="median",           
             colour ="red",          
             size=4) +
  xlab("Year") +
  ylab("Weights") +
  theme(axis.title.y=element_text(angle = 0)) +
  ggtitle ('Weights of hscode = 304620 by Year')
```

::: callout-Insights
The hscode with top weights is 304620 which is categorised under:

-   Fish and crustaceans, molluscs and other aquatic invertebrates // Fish fillets and other fish meat (whether or not minced), fresh, chilled or frozen. // - Frozen fillets of tilapias (Oreochromis spp.), catfish (Pangasius spp., Silurus spp., Clarias spp., Ictalurus spp.), carp (Cyprinus carpio, Carassius carassius, Ctenopharyngodon idellus, Hypophthalmichthys spp., Cirrhinus spp., Mylopharyngodon piceus), eels (Anguilla spp.), Nile perch (Lates niloticus) and snakeheads (Channa spp.) : // -- Catfish (Pangasius spp., Silurus spp., Clarias spp., Ictalurus spp.)

It is observed that the median weights is similar across the years but there are quite a number of outliers every year.
:::

## 3.3 Visualization of Centrality Measures by Year

### Data Preparation

-   Derive new variable, weights, that sums the number of source to target and form new edges data tables by year.

```{r}
MC2_edges_aggregated2028 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2028") %>%
  ungroup() 

MC2_edges_aggregated2029 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2029") %>%
  ungroup() 

MC2_edges_aggregated2030 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2030") %>%
  ungroup() 

MC2_edges_aggregated2031 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2031") %>%
  ungroup() 

MC2_edges_aggregated2032 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2032") %>%
  ungroup() 

MC2_edges_aggregated2033 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2033") %>%
  ungroup() 

MC2_edges_aggregated2034 <- MC2_edges %>%
  group_by(source, target, hscode, Year) %>%
    summarise(weights = n()) %>%
  filter(source!=target, Year == "2034") %>%
  ungroup() 
```

-   Form new nodes data table for MC2 by year, by using source and target of MC2_edges_aggregated data table. This is to ensure that the nodes in nodes data tables include all the source and target values.

```{r}
id1 <- MC2_edges_aggregated2028 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2028 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2028 <- rbind(id1, id2) %>%
  distinct()

id1 <- MC2_edges_aggregated2029 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2029 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2029 <- rbind(id1, id2) %>%
  distinct()

id1 <- MC2_edges_aggregated2030 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2030 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2030 <- rbind(id1, id2) %>%
  distinct()

id1 <- MC2_edges_aggregated2031 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2031 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2031 <- rbind(id1, id2) %>%
  distinct()

id1 <- MC2_edges_aggregated2032 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2032 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2032 <- rbind(id1, id2) %>%
  distinct()

id1 <- MC2_edges_aggregated2033 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2033 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2033 <- rbind(id1, id2) %>%
  distinct()

id1 <- MC2_edges_aggregated2034 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated2034 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted2034 <- rbind(id1, id2) %>%
  distinct()
```

-   Build the tidygraph data model

```{r}
MC2_graph2028 <- tbl_graph(nodes = MC2_nodes_extracted2028,
                       edges = MC2_edges_aggregated2028,
                       directed = TRUE) 

MC2_graph2029 <- tbl_graph(nodes = MC2_nodes_extracted2029,
                       edges = MC2_edges_aggregated2029,
                       directed = TRUE) 

MC2_graph2030 <- tbl_graph(nodes = MC2_nodes_extracted2030,
                       edges = MC2_edges_aggregated2030,
                       directed = TRUE) 

MC2_graph2031 <- tbl_graph(nodes = MC2_nodes_extracted2031,
                       edges = MC2_edges_aggregated2031,
                       directed = TRUE) 

MC2_graph2032 <- tbl_graph(nodes = MC2_nodes_extracted2032,
                       edges = MC2_edges_aggregated2032,
                       directed = TRUE) 

MC2_graph2033 <- tbl_graph(nodes = MC2_nodes_extracted2033,
                       edges = MC2_edges_aggregated2033,
                       directed = TRUE) 

MC2_graph2034 <- tbl_graph(nodes = MC2_nodes_extracted2034,
                       edges = MC2_edges_aggregated2034,
                       directed = TRUE) 
```

-   Compute various centrality measures from the tidygraph data models:

    -   In Degree
    -   Out Degree
    -   Eigenvalue
    -   Betweenness
    -   In Closeness
    -   Out Closeness

-   Compute centrality edge betweenness from the edges table.

```{r}
MC2_graph2028 <- MC2_graph2028 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2028 <- MC2_graph2028 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 

MC2_graph2029 <- MC2_graph2029 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2029 <- MC2_graph2029 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 

MC2_graph2030 <- MC2_graph2030 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2030 <- MC2_graph2030 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 

MC2_graph2031 <- MC2_graph2031 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2031 <- MC2_graph2031 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 

MC2_graph2032 <- MC2_graph2032 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2032 <- MC2_graph2032 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 

MC2_graph2033 <- MC2_graph2033 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2033 <- MC2_graph2033 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 

MC2_graph2034 <- MC2_graph2034 %>% 
  activate("nodes") %>%
  mutate(in_degree = centrality_degree(mode = "in")) %>%
  mutate(out_degree = centrality_degree(mode = "out")) %>%
  mutate(eigen = centrality_eigen()) %>%
  mutate(betweenness = centrality_betweenness()) %>%
  mutate(indeg_bin = cut(in_degree, breaks = c(0, 500, 1000, 1500, Inf),
                       labels = c("1\n(0-499)", 
                                  "2\n(500-999)", 
                                  "3\n(1000-1499)",
                                  "4\n(>=1500)\n"),  
                       include.lowest = TRUE)) %>%
  mutate(outdeg_bin = cut(out_degree, breaks = c(0, 50, 100, 150, Inf),
                       labels = c("1\n(0-49)", 
                                  "2\n(50-99)", 
                                  "3\n(100-149)",
                                  "4\n(>=150)\n"),  
                       include.lowest = TRUE)) %>%
  rename(group = outdeg_bin)

MC2_graph2034 <- MC2_graph2034 %>%
  activate("edges") %>%
  mutate(importance = centrality_edge_betweenness()) 
```

### 3.3.1 Centrality Degree (In)

-   We want to find out which companies have the highest number of incoming links.

-   Due to the large data size, we filter data with in_degree \> 30 and community group \< 5. Group_component is used to identify the prominent communities.

::: panel-tabset
## 2028

```{r}
MC2_graph_indegree2028 <- MC2_graph2028 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2028, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2028")

kable(head(MC2_graph_indegree2028 %>%
  as_tibble(), 5))
```

## 2029

```{r}
MC2_graph_indegree2029 <- MC2_graph2029 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2029, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2029")

kable(head(MC2_graph_indegree2029 %>%
  as_tibble(), 5))
```

## 2030

```{r}
MC2_graph_indegree2030 <- MC2_graph2030 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2030, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2030")

kable(head(MC2_graph_indegree2030 %>%
  as_tibble(), 5))
```

## 2031

```{r}
MC2_graph_indegree2031 <- MC2_graph2031 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2031, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2031")

kable(head(MC2_graph_indegree2031 %>%
  as_tibble(), 5))
```

## 2032

```{r}
MC2_graph_indegree2032 <- MC2_graph2032 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2032, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2032")

kable(head(MC2_graph_indegree2032 %>%
  as_tibble(), 5))
```

## 2033

```{r}
MC2_graph_indegree2033 <- MC2_graph2033 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2033, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2033")

kable(head(MC2_graph_indegree2033 %>%
  as_tibble(), 5))
```

## 2034

```{r}
MC2_graph_indegree2034 <- MC2_graph2034 %>%
  activate("nodes") %>%
  arrange(desc(in_degree)) %>%
  filter(in_degree > 30) %>%
  mutate(group1 = group_components()) %>%
  filter(group1 < 5) 

set.seed(1234)
ggraph(MC2_graph_indegree2034, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = in_degree, colour = group1)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("In-degree Network in 2034")

kable(head(MC2_graph_indegree2034 %>%
  as_tibble(), 5))
```
:::

::: callout-Insights
The following configurations should be noted before we interpret the graphs:

-   Node size is set to in-degree

-   Node colour is set to community group

-   Edge width is set to weights

-   Edge colour is set to centrality_edge_betweenness

It is observed that the top 5 companies with highest in-degree in 2028 are:

1.  hǎi dǎn Corporation Wharf

2.  Mar del Este CJSC

3.  Caracola del Sol Services

4.  Costa de la Felicidad Shipping

5.  Pao gan SE Seal

The top 5 comapnies are consistent across the other years and the respective companies' in-degree values are also quite consistent across the years. No abnormality is observed.

These companies are likely wholesalers/importers who buy/import fishes from other fishing companies/fishermen.

It is also observed that there is high centrality edge betweenness between Selous Game Reserve A/S and Pao gan SE Seal in 2028.

In 2032 and 2033, there is high centrality_edge_betweenness between AtlanticAppetite Oyster Ltd. Corporation Investment and Dutch Ltd. Liability Co Consultants.
:::

### 3.3.2 Centrality Degree (Out)

-   We want to find out which companies have the highest number of out-going links.

-   Due to the large data size, we filter data with out_degree \> 10 and community group \< 5. Group_component is used to identify the prominent communities.

-   Data preparation:

```{r}
MC2_graph_outdegree2028 <- MC2_graph2028 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 10) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2028, "data/MC2_graph_outdegree2028.rds")

MC2_graph_outdegree2029 <- MC2_graph2029 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 10) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2029, "data/MC2_graph_outdegree2029.rds")

MC2_graph_outdegree2030 <- MC2_graph2030 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 10) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2030, "data/MC2_graph_outdegree2030.rds")

MC2_graph_outdegree2031 <- MC2_graph2031 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 10) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2031, "data/MC2_graph_outdegree2031.rds")

MC2_graph_outdegree2032 <- MC2_graph2032 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 10) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2032, "data/MC2_graph_outdegree2032.rds")

MC2_graph_outdegree2033 <- MC2_graph2033 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 10) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2033, "data/MC2_graph_outdegree2033.rds")

MC2_graph_outdegree2034 <- MC2_graph2034 %>%
  activate("nodes") %>%
  arrange(desc(out_degree)) %>%
  filter(out_degree > 12) %>%
  mutate(group2 = group_components()) %>%
  filter(group2 < 5) 

write_rds(MC2_graph_outdegree2034, "data/MC2_graph_outdegree2034.rds")
```

-   Prepare edges tibble data frame

```{r}
edges_outdegree2028_df <- MC2_graph_outdegree2028 %>%
  activate(edges) %>%
  as_tibble()

edges_outdegree2029_df <- MC2_graph_outdegree2029 %>%
  activate(edges) %>%
  as_tibble()

edges_outdegree2030_df <- MC2_graph_outdegree2030 %>%
  activate(edges) %>%
  as_tibble()

edges_outdegree2031_df <- MC2_graph_outdegree2031 %>%
  activate(edges) %>%
  as_tibble()

edges_outdegree2032_df <- MC2_graph_outdegree2032 %>%
  activate(edges) %>%
  as_tibble()

edges_outdegree2033_df <- MC2_graph_outdegree2033 %>%
  activate(edges) %>%
  as_tibble()

edges_outdegree2034_df <- MC2_graph_outdegree2034 %>%
  activate(edges) %>%
  as_tibble()
```

-   Prepare nodes tibble data frame

```{r}
nodes_outdegree2028_df <- MC2_graph_outdegree2028 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)

nodes_outdegree2029_df <- MC2_graph_outdegree2029 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)

nodes_outdegree2030_df <- MC2_graph_outdegree2030 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)

nodes_outdegree2031_df <- MC2_graph_outdegree2031 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)

nodes_outdegree2032_df <- MC2_graph_outdegree2032 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)

nodes_outdegree2033_df <- MC2_graph_outdegree2033 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)

nodes_outdegree2034_df <- MC2_graph_outdegree2034 %>%
  activate(nodes) %>%
  as_tibble() %>%
  rename(label = id) %>%
  mutate(id=row_number()) %>%
  select(id, label, group)
```

::: panel-tabset
## 2028

```{r}
visNetwork(nodes_outdegree2028_df,
           edges_outdegree2028_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2028 %>%
  as_tibble(), 10))
```

## 2029

```{r}
visNetwork(nodes_outdegree2029_df,
           edges_outdegree2029_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2029 %>%
  as_tibble(), 10))
```

## 2030

```{r}
visNetwork(nodes_outdegree2030_df,
           edges_outdegree2030_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2030 %>%
  as_tibble(), 10))
```

## 2031

```{r}
visNetwork(nodes_outdegree2031_df,
           edges_outdegree2031_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2031 %>%
  as_tibble(), 10))
```

## 2032

```{r}
visNetwork(nodes_outdegree2032_df,
           edges_outdegree2032_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2032 %>%
  as_tibble(), 10))
```

## 2033

```{r}
visNetwork(nodes_outdegree2033_df,
           edges_outdegree2033_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2033 %>%
  as_tibble(), 10))
```

## 2034

```{r}
visNetwork(nodes_outdegree2034_df,
           edges_outdegree2034_df) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 3)), 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)  

kable(head(MC2_graph_outdegree2034 %>%
  as_tibble(), 10))
```
:::

::: callout-Insights
The following configurations should be noted before we interpret the graphs:

-   Node colour denotes the level of out-degree e.g. nodes with \>=150 number of outgoing links are coloured in blue.

It is observed that the top 5 companies with highest out-degree in 2028 are:

1.  Chhattisgarh Marine ecology A/S Delivery

2.  Caracola del Este Corporation Express

3.  The Salty Dog Limited Liability Company

4.  Fresh Limited Liability Company

5.  bǐ mù yú Sagl Distribution

These companies are likely wholesalers/exporters who sell/export fishes to retailers.

Chhattisgarh Marine ecology A/S Delivery remains the top company with highest out-degree in the subsequent years except for 2034 where it is overtaken by Line S.A. de C.V. The graph did not reflect all the outgoing links. This could be due to companies with number of outgoing links \<=10 being removed before plotting the graph.

It is observed that in 2028, Caracola del Este Corporation Express, Zambezi Gorge N.V. Transport, Coral Cove LC Hull and Mar del Norte OJSC are within the top 10 list that only have out-going links and 0 incoming links.

In 2029, Zambezi Gorge N.V. Transport, Yu er he Bonito, Fresh Limited Liability Company and Caracola del Este Corporation Express are within the top 10 list that only have out-going links and 0 incoming links.

In 2030, Yu er he Bonito, Caracola del Este Corporation Express, Zambezi Gorge N.V. Transport, Fresh Limited Liability Company, Mar del Norte OJSC and Saltwater Sanctuary Marine ecology are within the top 10 list that only have out-going links and 0 incoming links.

In 2031, Arena del Sol SRL, Line S.A. de C.V., Zambezi Gorge N.V. Transport and Sea Breezes S.A. de C.V. Freight are within the top 10 list that only have out-going links and 0 incoming links.

In 2032, Zambezi Gorge N.V. Transport is the only company within the top 10 list that only have out-going links and 0 incoming links.

In 2033, Zambezi Gorge N.V. Transport, The Salty Dog Limited Liability Company, Saltwater Sirens S.p.A. International and OceanSavor Surf Limited Liability Company Logistics are within the top 10 list that only have out-going links and 0 incoming links.

In 2034, Zambezi Gorge N.V. Transport, Saltwater Sirens S.p.A. International, Telangana Wakame CJSC United, Lake Tana & Son's and Belgian Scallop Harbor ОАО Freight are within the top 10 list that only have out-going links and 0 incoming links.

The above-mentioned companies with many out-going links and 0 incoming links should be further investigated as it is questionable why they are selling their fishes to so many different companies.
:::

### 3.3.3 Eigenvector Centrality

-   Eigenvector centrality measures the transitive influence of nodes. Relationships originating from high-scoring nodes contribute more to the score of a node than connections from low-scoring nodes. A high eigenvector centrality score means that a node is connected to many nodes who themselves have high scores.

-   Due to the large data size, we filter data with eigenvector \> 0.1 and community group \< 5. Group_component is used to identify the prominent communities.

::: panel-tabset
## 2028

```{r}
MC2_graph_eigen2028 <- MC2_graph2028 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2028, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2028")

kable(head(MC2_graph_eigen2028 %>%
  as_tibble(), 5))
```

## 2029

```{r}
MC2_graph_eigen2029 <- MC2_graph2029 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2029, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2029")

kable(head(MC2_graph_eigen2029 %>%
  as_tibble(), 5))
```

## 2030

```{r}
MC2_graph_eigen2030 <- MC2_graph2030 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2030, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2030")

kable(head(MC2_graph_eigen2030 %>%
  as_tibble(), 5))
```

## 2031

```{r}
MC2_graph_eigen2031 <- MC2_graph2031 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2031, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2031")

kable(head(MC2_graph_eigen2031 %>%
  as_tibble(), 5))
```

## 2032

```{r}
MC2_graph_eigen2032 <- MC2_graph2032 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2032, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2032")

kable(head(MC2_graph_eigen2032 %>%
  as_tibble(), 5))
```

## 2033

```{r}
MC2_graph_eigen2033 <- MC2_graph2033 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2033, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2033")

kable(head(MC2_graph_eigen2033 %>%
  as_tibble(), 5))
```

## 2034

```{r}
MC2_graph_eigen2034 <- MC2_graph2034 %>%
  activate("nodes") %>%
  arrange(desc(eigen)) %>%
  filter(eigen > 0.1) %>%
  mutate(group3 = group_components()) %>%
  filter(group3 < 5) 

set.seed(1234)
ggraph(MC2_graph_eigen2034, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = eigen, colour = group3)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Eigen Network in 2034")

kable(head(MC2_graph_eigen2034 %>%
  as_tibble(), 5))
```
:::

::: callout-Insights
The following configurations should be noted before we interpret the graphs:

-   Node size is set to eigenvector centrality

-   Node colour is set to community group

-   Edge width is set to weights

-   Edge colour is set to centrality_edge_betweenness

It is observed that the top 4 companies with highest eigenvector centrality from 2028 to 2032 are:

1.  hǎi dǎn Corporation Wharf

2.  Mar del Este CJSC

3.  Caracola del Sol Services

4.  Costa de la Felicidad Shipping

Line S.A. de C.V. came in 3rd in terms of highest eigenvector centrality in 2033 and rose to 2nd highest place in 2034.

The results are consistent with the top 4 companies with highest number of incoming links yearly.
:::

### 3.3.4 Centrality Betweenness

-   Centrality Betweenness is a way of detecting the amount of influence a node has over the flow of information in a graph. It finds nodes that serve as a bridge from one part of a graph to another and measures the shortest paths between all pairs of nodes in a graph. A node with higher betweenness centrality would have more control over the network.

-   Due to the large data size, we filter data with betweenness \> 500 and community group \< 5. Group_component is used to identify the prominent communities.

::: panel-tabset
## 2028

```{r}
MC2_graph_betweenness2028 <- MC2_graph2028 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2028, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2028")

kable(head(MC2_graph_betweenness2028 %>%
  as_tibble(), 5))
```

## 2029

```{r}
MC2_graph_betweenness2029 <- MC2_graph2029 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2029, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2029")

kable(head(MC2_graph_betweenness2029 %>%
  as_tibble(), 5))
```

## 2030

```{r}
MC2_graph_betweenness2030 <- MC2_graph2030 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2030, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2030")

kable(head(MC2_graph_betweenness2030 %>%
  as_tibble(), 5))
```

## 2031

```{r}
MC2_graph_betweenness2031 <- MC2_graph2031 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2031, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2031")

kable(head(MC2_graph_betweenness2031 %>%
  as_tibble(), 5))
```

## 2032

```{r}
MC2_graph_betweenness2032 <- MC2_graph2032 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2032, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2032")

kable(head(MC2_graph_betweenness2032 %>%
  as_tibble(), 5))
```

## 2033

```{r}
MC2_graph_betweenness2033 <- MC2_graph2033 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2033, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2033")

kable(head(MC2_graph_betweenness2033 %>%
  as_tibble(), 5))
```

## 2034

```{r}
MC2_graph_betweenness2034 <- MC2_graph2034 %>%
  activate("nodes") %>%
  arrange(desc(betweenness)) %>%
  filter(betweenness > 500) %>%
  mutate(group4 = group_components()) %>%
  filter(group4 < 5) 

set.seed(1234)
ggraph(MC2_graph_betweenness2034, 
            layout = "fr") +
  geom_edge_link(aes(width = weights, colour = importance), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(size = betweenness, colour = group4)) + 
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Betweenness Network in 2034")

kable(head(MC2_graph_betweenness2034 %>%
  as_tibble(), 5))
```
:::

::: callout-Insights
The following configurations should be noted before we interpret the graphs:

-   Node size is set to betweenness centrality

-   Node colour is set to community group

-   Edge width is set to weights

-   Edge colour is set to centrality_edge_betweenness

It is observed that Selous Game Reserve S.A. de C.V. and Pao gan SE Seal are among the top 10 comanies with the highest betweenness centrality from 2028 to 2031. This means that they have higher control over the network. Selous Game Reserve S.A. de C.V. continues to be in the top 10 list from 2032 to 2034. The company name is suspicious as it has no inference to fishing activities.
:::

## 3.4 Taking a Closer Look at Zambezi Gorge N.V. Transport

-   We want to find out the fishing activities of Zambezi Gorge N.V. Transport as it has one of the highest number of outgoing links but no incoming link.

::: panel-tabset
## 2028

```{r}
MC2_edges_aggregated_odtop2028 <- MC2_edges_aggregated2028 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2028 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2028 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2028 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2028 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2028,
                       edges = MC2_edges_aggregated_odtop2028,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2028, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2028")
```

## 2029

```{r}
MC2_edges_aggregated_odtop2029 <- MC2_edges_aggregated2029 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2029 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2029 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2029 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2029 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2029,
                       edges = MC2_edges_aggregated_odtop2029,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2029, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2029")
```

## 2030

```{r}
MC2_edges_aggregated_odtop2030 <- MC2_edges_aggregated2030 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2030 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2030 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2030 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2030 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2030,
                       edges = MC2_edges_aggregated_odtop2030,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2030, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2030")
```

## 2031

```{r}
MC2_edges_aggregated_odtop2031 <- MC2_edges_aggregated2031 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2031 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2031 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2031 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2031 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2031,
                       edges = MC2_edges_aggregated_odtop2031,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2031, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2031")
```

## 2032

```{r}
MC2_edges_aggregated_odtop2032 <- MC2_edges_aggregated2032 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2032 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2032 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2032 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2032 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2032,
                       edges = MC2_edges_aggregated_odtop2032,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2032, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2032")
```

## 2033

```{r}
MC2_edges_aggregated_odtop2033 <- MC2_edges_aggregated2033 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2033 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2033 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2033 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2033 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2033,
                       edges = MC2_edges_aggregated_odtop2033,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2033, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2033")
```

## 2034

```{r}
MC2_edges_aggregated_odtop2034 <- MC2_edges_aggregated2034 %>%
  filter(source == "Zambezi Gorge  N.V. Transport") %>%
  arrange(desc(weights)) %>%
  select(source, target, hscode, Year, weights) %>%
  head(30)

id1 <- MC2_edges_aggregated_odtop2034 %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated_odtop2034 %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted_odtop2034 <- rbind(id1, id2) %>%
  distinct()

MC2_graph_odtop2034 <- tbl_graph(nodes = MC2_nodes_extracted_odtop2034,
                       edges = MC2_edges_aggregated_odtop2034,
                       directed = TRUE) 

ggraph(MC2_graph_odtop2034, 
            layout = "nicely") +
  geom_edge_link(aes(width = weights), 
                 alpha=0.2, arrow = arrow(length = unit(4, 'mm'))) +
  scale_edge_width(range = c(0.1, 5)) +
  theme_graph() +
  geom_node_text(aes(label = id), size = 1, repel=TRUE) +
  ggtitle("Activities of Zambezi Gorge N.V. Transport in 2034")
```
:::

::: callout-Insights
It is observed that Zambezi Gorge N.V. Transport do not send its goods to the same companies every year. It makes the most number of trips i.e. highest weights to Panope Limited Liability Company from 2032 to 2034. It is questionable why it only sends goods and to so many companies.
:::

**4. Conclusion**

In conclusion, there are several actors in the fishing industry, from commercial fishermen to vessel owners to retailers and distributors. Those companies with one-to-one relationship should be having exclusive agreements/distributorship. Those companies with high in-degree are likely wholesalers/importers who buy/import fishes from other fishing companies/fishermen. Those companies with high out-degree are likely wholesalers/exporters who sell/export fishes to retailers. Further investigation of the networks are required to detect specific anomalies.