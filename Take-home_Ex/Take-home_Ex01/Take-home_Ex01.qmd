---
title: "Take-home Exercise 1"
subtitle: "Visual Analytics of the Demographic and Financial Characteristics of the City of Engagement"
author: "Alicia"
date: "7 May 2023"
date-modified: "`r Sys.Date()`"
editor: visual

execute:
  echo: true
  eval: true
  warning: false
---

# **1. Overview**

This exercise aims to uncover the demographic and financial characteristics of the City of Engagement using appropriate analytical visualisation techniques. The visualization is designed using `ggplot2`, its extensions, and `tidyverse` packages.

The original dataset was originated from Vast Challenge 2022.

There are 2 files downloaded: *FinancialJournal.csv* and *Participants.csv*

# **2. Data Preparation**

## 2.1 Install R packages and import dataset

The code chunk below uses `pacman::p_load()` to check if packages are installed. If they are, they will be launched into R.

```{r}
#Load packages
pacman::p_load(plotly, ggstatsplot, knitr, patchwork, ggdist, ggthemes, ggridges, viridis, gganimate, lubridate, tidyverse, ungeviz, colorspace)
```

Import data from csv using `readr::read_csv()`.

```{r}
#Import data
financial <- read_csv("data/FinancialJournal.csv", show_col_types = FALSE)

participants <- read_csv("data/Participants.csv", show_col_types = FALSE)
```

## 2.2 Data wrangling

Looking at the data below, we notice a few problems as follows:

Participants:

-   **haveKids** is in `<lgl>` format and needs to be converted to binary.

-   **educationLevel** is in `<chr>` format. It needs to be converted to `<fct>` so that we can rank the levels from low to high.

-   **age** can be binned for ease of trend visualisation.

Financial:

-   The time in **timestamp** is redundant and not meaningful and should be removed.

-   The various financial categories in **category** should be separated and transposed into individual columns for ease of analysis.

-   2 new variables, Income and Expense, should be created to sum up the monthly income and expenses for each participant.

Thereafter, the 2 tables should be merged into a new table

```{r}
#| code-fold: true
#| code-summary: "Show the code"

participants
financial
```

`is.na()` function is also used to confirm that there are no missing values in the ***participants*** and ***financial*** datasets.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Check for missing values
any(is.na(participants))
any(is.na(financial))
```

The code chunk below performs the required data wrangling to clean ***participants*** and ***financial*** datasets and store them in new variable ***p*** and ***f2*** respectively.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Data preparation
#store participants dataset in new variable p
p <- participants 

#Reformat haveKids to binary
p$haveKids <- as.integer(p$haveKids)

#Reformat educationLevel to factor
p$educationLevel <- as.factor(p$educationLevel)

#Bin age variable
p$age <- cut(p$age, seq(0, 100, 10))

#Store financial dataset in new variable f
f <- financial 

#Remove time from timestamp
f$timestamp <- format(as_datetime(f$timestamp), "%Y-%m")
f$timestamp <- lubridate::ym(f$timestamp)

#Split category and transpose to new columns
f1 <- f %>% group_by(participantId) %>%
  pivot_wider(
    names_from = category, 
    values_from = amount, 
    values_fn = list(amount = sum),
    values_fill = 0
    ) %>%
  ungroup()

#Create new variables, Income and Expense. Convert Expense values to positive. Store as new table f2
f2 <- f1 %>%
  group_by(participantId, timestamp) %>%
  mutate(Income=sum(Wage, RentAdjustment),
         Expense=sum(Shelter, Education, Food, Recreation)
         ) %>%
  ungroup()

f2$Expense <- abs(f2$Expense)

#Merge the 2 tables, p and f2 into new table, nt
nt <- left_join(p, f2,
by = join_by(participantId == participantId))

```

The final dataset ***nt*** is displayed below using `knitr::kable()` function. The summary statistics for each of the variables is displayed below using `psych::describe()` function.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

kable(head(nt), "simple")

psych::describe(nt)
```

# **3. Visualisation**

## 3.1 Exploratory Data Visualisation

The plots here are preliminary in nature but designed with interactivity to allow users to perform Exploratory Data Analysis (EDA) Visualisation to study the data. Hence `plotly` is mainly used.

### 3.1.1 Demographic Distribution

#### Design Consideration

Bar charts and histograms are plotted to observe the overall distribution of the dataset. The graphs are placed in individual tabs for ease of reference.

::: panel-tabset

## Household Size

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggplot(data = p,
       aes(x = householdSize)) +
  geom_bar(color="black", fill="light blue") +
  labs(title = 'Distribution by Household Size',
       x = "Household Size",
       y = "Frequency")

ggplotly(g)
```

## Have Kids?

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggplot(data = participants,
       aes(x = haveKids)) +
  geom_bar(color="black", fill="light blue") +
  labs(title = 'Distribution by Households With/without Kids',
       x = "Have Kids",
       y = "Frequency") 
  

ggplotly(g)
```

## Age

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggplot(data = p,
       aes(x = age)) +
  geom_bar(color="black", fill="light blue") +
  labs(title = 'Distribution by Age Group',
       x = "Age Group",
       y = "Frequency")

ggplotly(g)
```

## Education Level

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggplot(data = p,
       aes(x = factor(educationLevel, levels=c("Low", "HighSchoolOrCollege",  "Bachelors", "Graduate")))) +
  geom_bar(color="black", fill="light blue") +
  labs(title = 'Distribution by Education Level',
       x = "Education Level",
       y = "Frequency")

ggplotly(g)
```

## Interest Group

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggplot(data = p,
       aes(x = interestGroup)) +
  geom_bar(color="black", fill="light blue") +
  labs(title = 'Distribution by Interest Group',
       x = "Interest Group",
       y = "Frequency")

ggplotly(g)
```

## Joviality

```{r}
#| code-fold: true
#| code-summary: "Show the code"

mybreaks <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)

g <- ggplot(data = p,
       aes(x = joviality)) +
  geom_histogram(
    data = p,
    breaks = mybreaks,
    color="black",
    fill="light blue") +
  scale_x_continuous(breaks = mybreaks) +
  labs(title = 'Distribution by Joviality',
       x = "Joviality",
       y = "Frequency")

ggplotly(g)
```

:::

#### Insights

-   About 70% of the participants do not have kid.

-   The smallest age group belong to seniors age 50-60 (11%).

-   About 50% of the participants have up to high school or college education.

### 3.1.2 Relationship Between Monthly Income and Other Variables

#### Design Consideration

Boxplots are used to visualize the relationship between monthly income and other discrete variables. Violin plot is also be added to visualize the kernel density of the data.

-   A dropdown menu is included to select variables for x-axis while the y-axis is monthly income.

-   The x-axis variables that can be selected are namely: householdSize, haveKids, age, educationLevel, and interestGroup. Note that month (timestamp) is treated as discrete variable as we want to find out any seasonal variations (statistically significant difference in mean/median) of price.

-   Tooltip is used to show mean, quartiles, and outliers.

-   The variables are Ordered by ascending order.

plot_ly is used to prepare the interactive plot. Steps taken are:

-   Box visible argument is set to T to ensure the boxplot is visible. The same is applied to meanline visible.

-   Set the opacity of the dots to 0.5 and the color of the meanline to dark pink to improve visualisation.

-   Layout argument is used to add plot title, and y-axis title.

-   The updatemenus argument is used to create dropdown menu buttons.

-   Categoryorder is set for each button to determine the order of discrete variables.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| 
#Initiating the base plot
plot_ly(data = nt,
        x = ~householdSize,
        y = ~Income,
        line = list(width =1),
        type = "violin",
        marker = list(opacity = 0.5,
          line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |> 
  
#Generating plot and y-axis title  
  layout(title = "Distribution of Monthly Income by selected factors",
         xaxis = list(title = ""),
         yaxis = list(title = "Monthly Income"),
         
#creating dropdown menus to allow selection of parameters on x-axis 
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(x = list(nt$householdSize)),
                                                    list(xaxis = list(categoryorder = "category ascending"))),
                                        label = "Household Size"),
                                   list(method = "update",
                                        args = list(list(x = list(nt$haveKids)),
                                                    list(xaxis = list(categoryorder = "category ascending"))),
                                        label = "Have Kids?"),
                                   list(method = "update",
                                        args = list(list(x = list(nt$age)),
                                                    list(xaxis = list(categoryorder = "category ascending"))),
                                        label = "Age Group"),
                                   list(method = "update",
                                        args = list(list(x = list(nt$educationLevel)),
                                                    list(xaxis = list(categoryorder = "mean ascending"))),
                                        label = "Education Level"),
                                   list(method = "update",
                                        args = list(list(x = list(nt$interestGroup)),
                                                    list(xaxis = list(categoryorder = "category ascending"))),
                                        label = "Interest Group"),
                                   list(method = "update",
                                        args = list(list(x = list(nt$timestamp)),
                                                    list(xaxis = list(tickmode = "array")),
                                                    list(color = list(nt$timestamp))),
                                        label = "Month")
                              
                                   )
                                 )
                            )
         )
```

#### Insights

-   The median monthly income increases with household size.

-   Households with kids have higher median monthly income.

-   Age group 30-40 has highest median monthly income (\$3,806) while 40-50 has lowest median monthly income (\$3,458).

-   Graduates have the highest median monthly income (\$5,523).

-   Interest Group D has the highest median monthly income (\$4,145) while E has the lowest (\$3,226).

-   Mar 2022 registered the highest median monthly income (\$5,800) while Feb 2023 registered the lowest (\$3,191).

### 3.1.3 Monthly Income Over the Months by Age Group and Education Level

#### Design Consideration

Ridgeline plot is used to reveal the distribution of monthly income for age and education level variables. It is useful for visualization as distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.

::: panel-tabset

## Age Group

```{r}
#| code-fold: true
#| code-summary: "Show the code"

windowsFonts("Garamond" = windowsFont("Garamond"))

ggplot(data = nt, aes(x = Income, y = age, fill = after_stat(x))) +
  
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  
  theme_ridges() +
  
    labs(title = 'Monthly Income by Age Group, Time: {frame_time}',
       x = "Monthly income",
       y = "Age") +
  
  theme(legend.position="none",
  text = element_text(family = "Garamond"),
  plot.title = element_text(face = "bold", size = 12),
  
  axis.title.x = element_text(size = 10, hjust = 1),
  axis.title.y = element_text(size = 10),
  axis.text = element_text(size = 8)) +
  
  scale_fill_viridis_c(name = "Income", option = "C") +
  
  transition_time(nt$timestamp) +
  ease_aes('linear')
```

## Education Level

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data = nt, aes(x = Income, y = factor(educationLevel, levels=c("Low", "HighSchoolOrCollege",  "Bachelors", "Graduate")), fill = after_stat(x))) +
  
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  
  theme_ridges() +
  
    labs(title = 'Monthly Income by Education Level, Time: {frame_time}',
       x = "Monthly Income",
       y = "Education Level") +
  
  theme(legend.position="none",
  text = element_text(family = "Garamond"),
  plot.title = element_text(face = "bold", size = 12),
  
  axis.title.x = element_text(size = 10, hjust = 1),
  axis.title.y = element_text(size = 10),
  axis.text = element_text(size = 8)) +
  
  scale_fill_viridis(name = "Income", option = "C") +
  
  transition_time(nt$timestamp) +
  ease_aes('linear')
```

:::

#### Insights

-   The monthly income across the different age groups and education levels is more or less contained within the period of the dataset. This could be due to only 12 months of data given.

-   Normal distribution is generally observed except for age group 30-40 and graduate education level.

## 3.2 Confirmatory Data Analysis Visualisation

The plots here are focused on visual statistical testing used in Confirmatory Data Analysis.

### 3.2.1 Correlation Scatterplots

#### Design Consideration

Correlation scatterplot is used to assess the correlation between monthly income and expense as well as the correlation between monthly wage and joviality level.

::: panel-tabset

## Monthly Income vs. Expense

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ie <- ggscatterstats(
  data=nt, 
  x = Expense,
  y = Income,
  marginal = FALSE
  ) +
  
  theme_minimal() +
  
  labs(title = 'Correlation of Monthly Income and Monthly Expense', x = "Monthly Expense", y = "Monthly Income") +

theme(text = element_text(family = "Garamond"),
        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),
        plot.margin = margin(20, 20, 20, 20),
        legend.position = "bottom",
        
        axis.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"))
ie
```

## Monthly Wage vs. Joviality

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wj <- ggscatterstats(
  data=nt, 
  x = Wage,
  y = joviality,
  marginal = FALSE
  ) +
  
  theme_minimal() +
  
  labs(title = 'Correlation of Monthly Wage and Joviality', x = "Monthly Wage", y = "Joviality") +

theme(text = element_text(family = "Garamond"),
        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),
        plot.margin = margin(20, 20, 20, 20),
        legend.position = "bottom",
        
        axis.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"))
wj
```

:::

#### Insights

Correlation between monthly income and expense:

There is sufficient evidence to conclude that there is a significant linear relationship between monthly income and monthly expenses because the p-value (2.42e-49) \< 0.05 and correlation coefficient (0.14) is significantly different from zero.

Correlation between monthly wage and joviality:

There is a significant negative linear relationship between monthly wage and joviality because the p-value (7.38e-195) \< 0.05 and correlation coefficient (-0.284) is significantly different from zero..

### 3.2.2 Normality Assumption

#### Design Consideration

We want to confirm the normality assumption for distribution of monthly income.  

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Computing summary statistics of mean, median and lower and upper whiskers in boxplot
Income_mean <- round(mean(nt$Income))
Income_median <- round(median(nt$Income))
ymax <- as.numeric(round((IQR(nt$Income)*1.5) +
                quantile(nt$Income,0.75)))
ymin <- as.integer(min(nt$Income))

#plotting histogram
h <- ggplot(data = nt, aes(x = Income)) + 
  geom_histogram(color="black", fill="azure4", binwidth = 500) + 
  scale_x_continuous(limits = c(0,22000), labels = scales::comma) +
  labs(x = "Income", y = "Distribution") +
  geom_vline(aes(xintercept = Income_mean), col="darkblue", linewidth=1) +
  annotate("text", x=6000, y=1800, label="Mean Income:", 
           size=3, color="darkblue") +
  annotate("text", x=5500, y=1700, label=format(Income_mean, big.mark = ","),
           size=3, color="darkblue") +
  geom_vline(aes(xintercept = Income_median), col="lightpink4", linewidth=1) +
  annotate("text", x=1800, y=1800, label="Median Income", 
           size=3, color="lightpink4") +
  annotate("text", x=2400, y=1700, label=format(Income_median, big.mark = ","),
           size=3, color="lightpink4") +
  theme(axis.text.x = element_text(size=8))

#plotting boxplot
b <- ggplot(data = nt, aes(y = Income)) + 
  geom_boxplot(outlier.colour="firebrick", outlier.shape=16,
               outlier.size=1, notch=FALSE) + 
  coord_flip() + labs(y = "", x = "") + 
  scale_y_continuous(limits = c(0,22000), labels = scales::comma) +
  theme(axis.text = element_blank(), axis.ticks = element_blank()) + 
  stat_boxplot(geom="errorbar", width=0.5) + 
  annotate("text", x=0.35, y=ymax, label=format(ymax, big.mark = ","), 
           size=3, color="lightpink4") +
  annotate("text", x=0.35, y=ymin, label=format(ymin, big.mark = ","), 
           size=3, color="lightpink4")

#combining plots
income_distri <- b / h + plot_layout(heights = c(1, 4)) 

income_distri + plot_annotation(title = "Distribution of Monthly Income", 
                               subtitle = "There is a right-skewed distribution i.e. mean monthly income > median monthly income.\n There is also a large number of outliers (income >$9,115).",
                               theme = theme(
                                 plot.title = element_text(size = 16),
                                 plot.subtitle = element_text(size = 10)))
```

We can see that the monthly income has a right-skewed distribution. This is a clear indication that the set of data is not normally distributed.

Since we are unable to confirm normality assumption, one-sample Wilcoxon test will be used for hypothesis testing. Note that the null hypothesis is no difference in median monthly income.

To ensure that best practices (APA standard) of statistical reporting is followed, `ggstatsplot` library is used in this section. Median is used instead of mean as point estimates due to high presence of outliers and skewness of data. This will also complement the non-parametric test as well.

Perform a one-sample Wilcoxon test to test the null hypothesis:

-   H0: the monthly income median is equal to \$3614
-   H1: the monthly income median is different from \$3614

```{r}
#| code-fold: true
#| code-summary: "Show the code"
set.seed(1234)

gghistostats(
  data = nt,
  x = Income,
  type = "nonparametric",
  test.value = 3614,
  xlab = "Income"
)
```

#### Insights

Based on the results of the test (at the significance level of 0.05), we reject the null hypothesis. There is enough evidence to conclude that the median monthly income is significantly different from \$3614 (p-value = 4.47e-44).

### 3.2.3 Difference in Monthly Income by Age Group and Education Level

#### Design Consideration

We want to confirm the normality assumption for distribution of monthly income by age group and education level.

::: panel-tabset

## Age Group

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Order the age variables by median of monthly income
nt1 <- nt
nt1$age <- fct_reorder(nt1$age, nt1$Income, median)

#set the color pallete
col13_1 <- c("dodgerblue2", "#E31A1C", 
  "green4",
  "#6A3D9A", 
  "#FF7F00"
  ) 
  
#Initiating the base plot
p1 <- ggbetweenstats(
  data = nt1 |> 
  group_by(age),
  x = age, 
  y = Income, 
  ylab = "Monthly Income",
  title = "One-way ANOVA (age)",
  type = "np", 
  pairwise.comparisons = TRUE,
  pairwise.display = "ns",
  mean.ci = TRUE,
  p.adjust.method = "fdr", 
  messages = FALSE 
  ) +
  scale_color_manual(values = col13_1) +
  theme(axis.title.x = element_blank()) +
  scale_y_continuous(limits = c(0, 25000))

p1 + plot_annotation(
  title = 'One-way ANOVA reveals differences in monthly income across different age groups',
  subtitle = 'Monthly Income by Age',
  theme = theme(plot.title = element_text(face = "bold", size = 12))
)
```

## Education Level

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Order the educationLevel variables by median of monthly income
nt1$educationLevel <- fct_reorder(nt1$educationLevel, nt1$Income, median)

#set the color pallete
col13_1 <- c("dodgerblue2", "#E31A1C", 
  "green4",
  "#6A3D9A" 
  ) 
  
#Initiating the base plot
p1 <- ggbetweenstats(
  data = nt1 |> 
  group_by(educationLevel),
  x = educationLevel, 
  y = Income, 
  ylab = "Monthly Income",
  title = "One-way ANOVA (education level)",
  type = "np", 
  pairwise.comparisons = TRUE,
  pairwise.display = "ns",
  mean.ci = TRUE,
  p.adjust.method = "fdr", 
  messages = FALSE 
  ) +
  scale_color_manual(values = col13_1) +
  theme(axis.title.x = element_blank()) +
  scale_y_continuous(limits = c(0, 25000))

p1 + plot_annotation(
  title = 'One-way ANOVA reveals differences in monthly income across education levels',
  subtitle = 'Monthly Income by Education Levels',
  theme = theme(plot.title = element_text(face = "bold", size = 12))
)
```

:::

#### Insights

By age group:

As noted above, the hypothesis testing is done using Kruskal-Wallis test with 95% confidence level. The hypothesis is:

-   H0 : There is no difference between median monthly income across age groups

-   H1 : There is difference between median monthly income across age groups

Since the p-value \< critical value of 0.05, there is statistical evidence to reject the null hypothesis. We can conclude that there is significant difference in median monthly income across the age groups.

By education level:

The hypothesis is:

-   H0 : There is no difference between median monthly income across education level

-   H1 : There is difference between median monthly income across education level

Since the p-value \< critical value of 0.05, there is statistical evidence to reject the null hypothesis. We can conclude that there is significant difference in median monthly income across the education levels.

### 3.2.4 Visualising Uncertainty of Monthly Income by Age Group and Education Level

#### Design Consideration

We would like to visualize the uncertainties surrounding the mean or median point estimates of the monthly income. Median point estimates are used instead of mean due to high presence of outliers and skewness of data. With this, user can still relate to the above one-way ANOVA analysis.

With median used as point estimate, quantile interval is used instead of confidence interval.

95% and 99% intervals are used as they are commonly associated with 5% and 1% error rate, which are commonly used in hypothesis testing.

::: panel-tabset

## Age Group

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Base ggplot
ggplot(
  data = nt,
  aes(x = factor(age),
      y = Income)) +
  
#Using stat_pointinterval to plot the points and intervals
  stat_pointinterval(
    aes(interval_color = stat(level)),
    .width = c(0.95, 0.99),
    .point = median,
    .interval = qi,
    point_color = "darkred",
    show.legend = FALSE) +

#Defining the color of the intervals 
  scale_color_manual(
    values = c("blue2", "darkblue"),
    aesthetics = "interval_color") +
  
#Title, subtitle, and caption
  labs(title = 'Visualising uncertainty in median estimates of monthly income by age group',
  subtitle = 'Quantiles intervals (95% and 99%) of monthly income by Age Group',
  x = "Age Group",
  y = "Monthly Income") +
  
  theme_hc() +
  
  theme(plot.title = element_text(face = "bold", size = 12),
        plot.subtitle = element_text(size = 10),
        axis.text.x = element_text(hjust = 1))
```

## Education Level

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Base ggplot
ggplot(
  data = nt,
  aes(x = factor(educationLevel, levels=c("Low", "HighSchoolOrCollege",  "Bachelors", "Graduate")),
      y = Income)) +
  
#Using stat_pointinterval to plot the points and intervals
  stat_pointinterval(
    aes(interval_color = stat(level)),
    .width = c(0.95, 0.99),
    .point = median,
    .interval = qi,
    point_color = "darkred",
    show.legend = FALSE) +

#Defining the color of the intervals 
  scale_color_manual(
    values = c("blue2", "darkblue"),
    aesthetics = "interval_color") +
  
#Title, subtitle, and caption
  labs(title = 'Visualising uncertainty in median estimates of monthly income by education level',
  subtitle = 'Quantiles intervals (95% and 99%) of monthly income by education level',
  x = "Education Level",
  y = "Monthly Income") +
  
  theme_hc() +
  
  theme(plot.title = element_text(face = "bold", size = 10),
        plot.subtitle = element_text(size = 9),
        axis.text.x = element_text(hjust = 1))
```

:::

#### Insights

-   As noted above, age group 10-20 and 50-60 have higher uncertainties in the median estimates of the monthly income.

-   Bachelors and Graduates have higher uncertainties in the median estimates of the monthly income.

Visualizing uncertainty of monthly income using Hypothetical Outcomes Plots based on 100 random samples:

::: panel-tabset

## Age Group

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data = nt, 
       (aes(x = factor(age), y = Income))) +
  geom_point(position = position_jitter(
    height = 0.3, width = 0.05), 
    size = 0.4, color = "#0072B2", alpha = 1/2) +
  geom_hpline(data = sampler(100, group = age), height = 0.6, color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3) +
  
  #Title, subtitle, and caption
  labs(title = 'Visualising uncertainty in monthly income by age group',
  x = "Age Group",
  y = "Monthly Income")
```

## Education Level

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data = nt, 
       (aes(x = factor(educationLevel, levels=c("Low", "HighSchoolOrCollege",  "Bachelors", "Graduate")), y = Income))) +
  geom_point(position = position_jitter(
    height = 0.3, width = 0.05), 
    size = 0.4, color = "#0072B2", alpha = 1/2) +
  geom_hpline(data = sampler(100, group = educationLevel), height = 0.6, color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3) +
  
  #Title, subtitle, and caption
  labs(title = 'Visualising uncertainty in monthly income by education level',
  x = "Education Level",
  y = "Monthly Income")
```

:::

#### Insights

-   As noted above, age group 20-30 and 30-40 have higher uncertainties in the median estimates of the monthly income.

-   Bachelors and Graduates have higher uncertainties in the monthly income.